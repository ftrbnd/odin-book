// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    followedBy    User[]    @relation("Friends")
    following     User[]    @relation("Friends")
    likedPosts    Like[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Like {
    id        String @id @default(cuid())
    likedBy   User   @relation(fields: [likedById], references: [id])
    likedById String
    post      Post   @relation(fields: [postId], references: [id])
    postId    String

    @@index([likedById])
    @@index([postId])
}

model Post {
    id        String    @id @default(cuid())
    image     String?
    text      String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    comments  Comment[]
    likes     Like[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([createdById])
}

model Comment {
    id        String   @id @default(cuid())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String
    post        Post   @relation(fields: [postId], references: [id])
    postId      String

    @@index([createdById])
    @@index([postId])
}
